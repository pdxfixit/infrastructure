#!/bin/bash
# Import all available databases

if [ ! -d /var/db/ ] ; then
  echo "Database folder not present!"
  exit 1
fi
cd /var/db/

import() { # 1=host, 2=user, 3=password, 4=database
  if [ -z "$2" ] || [ -z "$4" ] ; then
    return
  fi

  HOST="$1"
  USER="$2"
  PASS="$3"
  DB="$4"

  if ls ${DB}*.sql 1> /dev/null 2>&1; then
    FILE=$(ls ${DB}*.sql | tail -n 1)
    echo "Importing ${FILE} into ${DB}..."
    mysql -h ${HOST} -u ${USER} -p"${PASS}" -D ${DB} --execute="SOURCE ${FILE}"

    # Check for a 'localization' file. If exists, execute.
    if [ -f "${DB}.localize.sql" ] ; then
      FILE2="${DB}.localize.sql"
    elif [ -f "${DB}.dev.sql" ] ; then
      FILE2="${DB}.dev.sql"
    fi
    if [ ! -z "${FILE2}" ] ; then
      echo "Localizing ${DB}..."
      mysql -h ${HOST} -u ${USER} -p"${PASS}" -D ${DB} --execute="SOURCE ${FILE2}"
    fi
  else
    echo "No file found for ${DB}."
  fi
}
<% @databases.each do |database, setting| -%>

# <%= database %>
if [ ! -z "$1" ] && [ "$1" != "<%= database %>" ] ; then
  : # if a command-line argument has been provided, and it's not this database, skip
else
  import '<%= setting["host"] %>' '<%= setting["user"] %>' '<%= setting["password"] %>' '<%= database %>'
fi
<% end -%>

touch restore-complete
